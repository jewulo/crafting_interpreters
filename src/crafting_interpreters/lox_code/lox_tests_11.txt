var a = "outer";
{
    print a;
    var a = "inner";
}

var a = "outer";
{
    var a = "inner";
    print a;
}

var a = "global";
{
    fun showA() {
        print a;
    }

    showA();            // prints "global" because showA() captured 'a' from the outer scope
    var a = "block";    // create new local environment containing a new 'a''.
    showA();            // prints "global" because showA() still refers to captured 'a' from the outer scope
}

var a = "outer";
{
    // var a = a;  // Error at 'a': Can't read local variable in its own initializer.
}

fun bad() {
    var a = "first";
    var a = "second"; // Error at 'a': Already a variable with this name in this scope
}

return "at top level"; // Error at 'return': Can't return from top-level code.
